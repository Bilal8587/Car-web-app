import { _ as __assign } from '../../chunks/bundle-XQWyv823.js';
import React__default from 'react';
import ThreadListItem from './ThreadListItem.js';
import { useThreadContext } from '../context.js';
import { compareMessagesForGrouping } from '../../Channel/utils/compareMessagesForGrouping.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { isSameDay } from 'date-fns';
import { MessageProvider } from '../../Message/context.js';
import { g as getCaseResolvedReplyType } from '../../chunks/bundle-BOn8npYv.js';
import '../../chunks/bundle-QTCuDZTl.js';
import '../../chunks/bundle-DnujA9kt.js';
import '../../chunks/bundle--PhH_XFy.js';
import '../../chunks/bundle-BPcbf_pM.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-BL3yUpTV.js';
import '../../chunks/bundle-ixnsp7Bg.js';
import '../../chunks/bundle-BkDHtL7_.js';
import '../../chunks/bundle-NL8iE1lF.js';
import '../../chunks/bundle-D_-9RmNe.js';
import '@sendbird/chat/groupChannel';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-eZsqrPY3.js';
import '../../chunks/bundle-DABR6HKW.js';
import '../../chunks/bundle-BHC96gO0.js';
import 'react-dom';
import '../../chunks/bundle-R3uJ_0BB.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../ui/Icon.js';
import '@sendbird/uikit-tools';
import '../../withSendbird.js';
import 'css-vars-ponyfill';
import '@sendbird/chat';
import '../../chunks/bundle-Bq93DTET.js';
import '@sendbird/chat/openChannel';
import '../../chunks/bundle-BMJP8SSM.js';
import '../../chunks/bundle-ml-PByBw.js';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-B8L7dGsu.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-52W7LREX.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-BdwvjJsK.js';
import '../../chunks/bundle-vS1u8K1w.js';
import '../../chunks/bundle-CXPOT202.js';
import '../../chunks/bundle-CUxTGz0r.js';
import '../../chunks/bundle-C6DfLTJj.js';
import '../../chunks/bundle-CLlCJbe7.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-tC4B8MXx.js';
import 'dompurify';
import '../../chunks/bundle--FsN6ZvY.js';
import '../../chunks/bundle-CXiD3Is4.js';
import '../../chunks/bundle-BmHwyA9G.js';
import '../../chunks/bundle-D7JevDoE.js';
import '../context/types.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-CruP9bVM.js';
import '../../chunks/bundle-BX_znRDF.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-CmKxC8hb.js';
import '../../chunks/bundle-BAXCq_Wt.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-Bv8KtnvF.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../chunks/bundle-DRlnZqdp.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../chunks/bundle-B2NeDUAs.js';
import '../../ui/MobileMenu.js';
import '../../chunks/bundle-BFQnMRhA.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-CfaZQwKj.js';
import '../../chunks/bundle-D634UqaM.js';
import '../../chunks/bundle-KDJ0EkHX.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-DjfGQ-DS.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../chunks/bundle-oZLTNsQY.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-KNrNIKZQ.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../chunks/bundle-BaMsxnN_.js';
import '../../chunks/bundle-BdZX50Kw.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../chunks/bundle-CDvkkTNs.js';
import '../../chunks/bundle-CtcQd9Ql.js';
import '../../chunks/bundle-DKR-710v.js';
import '../../chunks/bundle-BKwxWorE.js';
import '../../chunks/bundle-BbVJcZ9w.js';

function ThreadList(_a) {
    var className = _a.className, _b = _a.renderMessage, renderMessage = _b === void 0 ? function (props) { return React__default.createElement(ThreadListItem, __assign({}, props)); } : _b, renderCustomSeparator = _a.renderCustomSeparator, scrollRef = _a.scrollRef, scrollBottom = _a.scrollBottom;
    var config = useSendbirdStateContext().config;
    var userId = config.userId;
    var _c = useThreadContext(), currentChannel = _c.currentChannel, allThreadMessages = _c.allThreadMessages, localThreadMessages = _c.localThreadMessages;
    return (React__default.createElement("div", { className: "sendbird-thread-list ".concat(className) },
        allThreadMessages.map(function (message, idx) {
            var _a;
            var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
            var prevMessage = allThreadMessages[idx - 1];
            var nextMessage = allThreadMessages[idx + 1];
            // eslint-disable-next-line no-constant-condition
            var _b = compareMessagesForGrouping(prevMessage, message, nextMessage, currentChannel, getCaseResolvedReplyType(config.groupChannel.replyType).upperCase)
                , chainTop = _b[0], chainBottom = _b[1];
            var hasSeparator = !((prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.createdAt) > 0 && (isSameDay(message === null || message === void 0 ? void 0 : message.createdAt, prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.createdAt)));
            var handleScroll = function () {
                var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
                if (current && scrollBottom) {
                    var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
                    if (scrollBottom < bottom) {
                        current.scrollTop += bottom - scrollBottom;
                    }
                }
            };
            return (React__default.createElement(MessageProvider, { message: message, isByMe: isByMe, key: message === null || message === void 0 ? void 0 : message.messageId }, renderMessage({
                message: message,
                chainTop: chainTop,
                chainBottom: chainBottom,
                hasSeparator: hasSeparator,
                renderCustomSeparator: renderCustomSeparator,
                handleScroll: handleScroll,
            })));
        }),
        localThreadMessages.map(function (message) {
            var _a;
            var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
            var handleScroll = function () {
                var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
                if (current) {
                    var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
                    if (scrollBottom < bottom) {
                        current.scrollTop += bottom - scrollBottom;
                    }
                }
            };
            return (React__default.createElement(MessageProvider, { message: message, isByMe: isByMe, key: message === null || message === void 0 ? void 0 : message.messageId }, renderMessage({
                message: message,
                hasSeparator: false,
                renderCustomSeparator: renderCustomSeparator,
                handleScroll: handleScroll,
            })));
        })));
}

export { ThreadList as default };
//# sourceMappingURL=ThreadList.js.map
