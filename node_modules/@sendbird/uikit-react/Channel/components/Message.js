import { _ as __assign } from '../../chunks/bundle-XQWyv823.js';
import React__default from 'react';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { useChannelContext } from '../context.js';
import { g as getSuggestedReplies } from '../../chunks/bundle-D_-9RmNe.js';
import { b as isDisabledBecauseFrozen, c as isDisabledBecauseMuted } from '../../chunks/bundle-CtcQd9Ql.js';
import { M as MessageView } from '../../chunks/bundle-CJirTNRH.js';
import { FileViewer } from './FileViewer.js';
import RemoveMessageModal from './RemoveMessageModal.js';
import '../../withSendbird.js';
import '../../chunks/bundle-Bv8KtnvF.js';
import '@sendbird/uikit-tools';
import '../../chunks/bundle-NL8iE1lF.js';
import '../../chunks/bundle-BHC96gO0.js';
import 'react-dom';
import '../../chunks/bundle--PhH_XFy.js';
import '../../chunks/bundle-BPcbf_pM.js';
import '../../chunks/bundle-R3uJ_0BB.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-ixnsp7Bg.js';
import '../../ui/Icon.js';
import 'css-vars-ponyfill';
import '@sendbird/chat';
import '../../chunks/bundle-Bq93DTET.js';
import '@sendbird/chat/openChannel';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-BMJP8SSM.js';
import '../../chunks/bundle-DABR6HKW.js';
import '../../chunks/bundle-eZsqrPY3.js';
import '../../chunks/bundle-ml-PByBw.js';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-C6DfLTJj.js';
import '../../chunks/bundle-B2NeDUAs.js';
import '../../chunks/bundle-QTCuDZTl.js';
import '../../chunks/bundle-DnujA9kt.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-DKR-710v.js';
import '../../chunks/bundle-BKwxWorE.js';
import '../../chunks/bundle-CCJRc28C.js';
import '../../chunks/bundle-lJZ9BTB_.js';
import '../../chunks/bundle-DRlnZqdp.js';
import '../../chunks/bundle-BApwq9D9.js';
import '../../chunks/bundle-BOn8npYv.js';
import '../../chunks/bundle-CDvkkTNs.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-BbVJcZ9w.js';
import '../../chunks/bundle-BaMsxnN_.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-BL3yUpTV.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-CLlCJbe7.js';
import '../../chunks/bundle-tC4B8MXx.js';
import 'dompurify';
import '../../chunks/bundle--FsN6ZvY.js';
import '../../chunks/bundle-CXiD3Is4.js';
import '../../chunks/bundle-BmHwyA9G.js';
import '../../chunks/bundle-D7JevDoE.js';
import '../../ui/MessageContent.js';
import '../../chunks/bundle-BX_znRDF.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-CmKxC8hb.js';
import '../../chunks/bundle-BAXCq_Wt.js';
import '../../chunks/bundle-CfaZQwKj.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ImageRenderer.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-CruP9bVM.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-52W7LREX.js';
import '../../chunks/bundle-BdwvjJsK.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-oZLTNsQY.js';
import '../../ui/MobileMenu.js';
import '../../ui/ThreadReplies.js';
import '../../chunks/bundle-KDJ0EkHX.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-DjfGQ-DS.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-BFQnMRhA.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-vS1u8K1w.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-KNrNIKZQ.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../ui/FeedbackIconButton.js';
import '../../ui/MobileFeedbackMenu.js';
import '../../ui/MessageFeedbackModal.js';
import '../../ui/Input.js';
import '../../chunks/bundle-D634UqaM.js';
import '../../GroupChannel/components/SuggestedReplies.js';
import '../../chunks/bundle-CUxTGz0r.js';
import '../../chunks/bundle-C_v0tgQ0.js';
import '../../chunks/bundle-BHNcTHkg.js';
import '../../chunks/bundle-B8L7dGsu.js';

var Message = function (props) {
    var _a, _b, _c;
    var config = useSendbirdStateContext().config;
    var _d = useChannelContext(), initialized = _d.initialized, currentGroupChannel = _d.currentGroupChannel, animatedMessageId = _d.animatedMessageId, setAnimatedMessageId = _d.setAnimatedMessageId, updateMessage = _d.updateMessage, scrollToMessage = _d.scrollToMessage, replyType = _d.replyType, threadReplySelectType = _d.threadReplySelectType, isReactionEnabled = _d.isReactionEnabled, toggleReaction = _d.toggleReaction, emojiContainer = _d.emojiContainer, nicknamesMap = _d.nicknamesMap, setQuoteMessage = _d.setQuoteMessage, resendMessage = _d.resendMessage, deleteMessage = _d.deleteMessage, renderUserMentionItem = _d.renderUserMentionItem, onReplyInThread = _d.onReplyInThread, onQuoteMessageClick = _d.onQuoteMessageClick, onMessageAnimated = _d.onMessageAnimated, sendMessage = _d.sendMessage, localMessages = _d.localMessages;
    var message = props.message;
    if (!currentGroupChannel)
        return null;
    return (React__default.createElement(MessageView, __assign({}, props, { channel: currentGroupChannel, emojiContainer: emojiContainer, editInputDisabled: !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !config.isOnline, shouldRenderSuggestedReplies: ((_a = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a === void 0 ? void 0 : _a.enableSuggestedReplies)
            && (((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.showSuggestedRepliesFor) === 'all_messages'
                ? true
                : message.messageId === ((_c = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.lastMessage) === null || _c === void 0 ? void 0 : _c.messageId))
            // the options should appear only when there's no failed or pending messages
            && (localMessages === null || localMessages === void 0 ? void 0 : localMessages.length) === 0
            && getSuggestedReplies(message).length > 0, isReactionEnabled: isReactionEnabled, replyType: replyType, threadReplySelectType: threadReplySelectType, nicknamesMap: nicknamesMap, renderUserMentionItem: renderUserMentionItem, scrollToMessage: scrollToMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onQuoteMessageClick: onQuoteMessageClick, onReplyInThreadClick: onReplyInThread, sendUserMessage: function (params) {
            sendMessage({
                message: params.message,
                mentionedUsers: params.mentionedUsers,
                mentionTemplate: params.mentionedMessageTemplate,
            });
        }, updateUserMessage: function (messageId, params) {
            var _a;
            updateMessage({
                messageId: messageId,
                message: (_a = params.message) !== null && _a !== void 0 ? _a : '',
                mentionedUsers: params.mentionedUsers,
                mentionTemplate: params.mentionedMessageTemplate,
            });
        }, resendMessage: resendMessage, deleteMessage: deleteMessage, animatedMessageId: animatedMessageId, setAnimatedMessageId: setAnimatedMessageId, onMessageAnimated: onMessageAnimated, renderFileViewer: function (props) { return React__default.createElement(FileViewer, __assign({}, props)); }, renderRemoveMessageModal: function (props) { return React__default.createElement(RemoveMessageModal, __assign({}, props)); } })));
};

export { Message as default };
//# sourceMappingURL=Message.js.map
